<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx"
					contentCreationComplete="init(event)"
					>
		
	<fx:Declarations>
		
		<mx:RemoteObject id="reportingRO" destination="ReportingTempsRepository" channelSet="{ChannelsUtils.instance.channelSet}" showBusyCursor="true"> 
			<mx:method name="reportForProjectsByDates" result="reportForProjectsByDatesHandler(event)"  fault="Alert.show(event.fault.faultString)" />
			<mx:method name="reportForUserByDates" result="reportForUserByDatesHandler(event)" fault="Alert.show(event.fault.faultString)"/>
		</mx:RemoteObject> 
		
		<mx:RemoteObject id="usersRO" destination="UtilisateurService" channelSet="{ChannelsUtils.instance.channelSet}" showBusyCursor="true"> 
			<mx:method name="loadAllUtilisateurs" result="loadAllUtilisateursHandler(event)"  fault="Alert.show(event.fault.faultString)" />
		</mx:RemoteObject>
		
		<s:DateTimeFormatter id="dateFormatter" dateTimePattern="dd/MM/yyyy"/>
		
		<mx:SeriesInterpolate id="seriesInterpolate" duration="1000" minimumElementDuration="200"  elementOffset="0"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.FlexEvent;
			import mx.graphics.IFill;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			
			import org.appa.planning.bo.Utilisateur;
			import org.appa.planning.util.ChannelsUtils;
			import org.appa.planning.util.UserContext;
			
			import spark.collections.SortField;
			import spark.components.Application;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var tempsParProjet:ArrayCollection;
			
			[Bindable]
			private var tempsParPersonne:ArrayCollection;
			
			[Bindable]
			private var listePersonnes:ArrayCollection;
			
			public function init(event:Event):void
			{
				if(dateDeb == null){
					return;
				}
				
				var now:Date = new Date();
				var firstDayOfYear:Date = new Date();
				firstDayOfYear.month = 0;
				firstDayOfYear.date = 1;
				
				dateDeb2.text = dateFormatter.format(firstDayOfYear);
				dateFin2.text = dateFormatter.format(now);
				
				if(UserContext.instance.user.role == 'responsable'){
					
					dateDeb.text = dateFormatter.format(firstDayOfYear);
					dateFin.text = dateFormatter.format(now);	
					refreshProjectsByDates();
					
					usersRO.getOperation("loadAllUtilisateurs").send();
				}else{
					if(tabs.getChildByName("reportingProjets") != null){
						tabs.removeChild(reportingProjets);
					}
					
					refreshUserByDates();
				}
			}
			
			protected function  loadAllUtilisateursHandler(event:ResultEvent):void{
				
				this.listePersonnes = event.result as ArrayCollection;
				
				var user:Utilisateur = listePersonnes.getItemAt(0) as Utilisateur;
				personDropDown.selectedItem = user;
				
				refreshUserByDates();
			}
						
			protected function refreshProjectsByDates():void
			{
				var date1:Date = DateField.stringToDate(dateDeb.text,'DD/MM/YYYY');
				var date2:Date = DateField.stringToDate(dateFin.text,'DD/MM/YYYY');
				date1.hours = 0;
				date1.minutes = 0;
				date1.seconds = 0;
				date2.hours = 23;
				date2.minutes = 59;
				date2.seconds = 59;
				
				reportingRO.getOperation("reportForProjectsByDates").send(date1, date2);
			}
			
			
			protected function reportForProjectsByDatesHandler(event:ResultEvent):void
			{
				var listeTemps:ArrayCollection =  event.result as ArrayCollection;
				
				var result:Dictionary = new Dictionary();
				var users:ArrayCollection = new ArrayCollection();
				for each (var ligne:Object in listeTemps) 
				{
					var projet:String = ligne.projet;
					var user:String = ligne.utilisateur;
					var temps:Number = ligne.temps;
					
					if(result[projet] == null){
						//creation d'une ligne par projet
						result[projet] = new Object();
						result[projet].projet = projet;
					}
					
					if(!users.contains(user)){
						//liste de tous les utilisateurs contenues dans les donnÃ©es de reporting
						users.addItem(user);
					}
					
					//affichage en jours
					result[projet][user] = temps/8;
				}
				
				//recuperation des valeurs du dictionnaire + calcul des totaux
				var result2:ArrayCollection = new ArrayCollection();
				for each (var data:Object in result){
					result2.addItem(data);
					
					var total:Number = 0;
					for each (var user:String in users){
						total =  total + (data[user]);
					}
					data.total = total;	
				}
				
				//tri par temps
				
				var dataSortField:SortField = new SortField();
				if(triParTempsProjet.selected){
					dataSortField.name = "total";
					dataSortField.numeric = true;
					dataSortField.descending = false;
				}else{
					dataSortField.name = "projet";
					dataSortField.descending = true;
				}
				
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				result2.sort = numericDataSort;
				result2.refresh();
				
				
				//creation du graphique dynamique
				var series:Array = new Array();
				i = 0;
				for each (var user:String in users){
					var serie:BarSeries = new BarSeries();
					serie.xField = user;
					serie.displayName = user;
					serie.setStyle("showDataEffect",seriesInterpolate);
					serie.setStyle("fill",colorsArray[i++]);
					//serie.fillFunction = fillChartColor;
					series.push(serie);
				}
				projetsBarSet.series = series;
				
				tempsParProjet = result2;
			}
			
			private var i:Number = 0;
			
			private var colorsArray:Array = new Array(
				new SolidColor(0x009DFF, .6),
				new SolidColor(0x80FF4D, .6), 
				new SolidColor(0xFFB600 , .6),
				new SolidColor(0xAECAD9, .6)
				
				 ); 
//			
//			protected function fillChartColor (item:ChartItem, index:Number):IFill {
//				return colorsArray[i++];
//			}

			
			protected function refreshUserByDates():void
			{
				var selectedUserId:String;
				if(personDropDown.enabled){
					selectedUserId = personDropDown.selectedItem.id;
				}else{
					selectedUserId = UserContext.instance.user.id.toString();
				}
				
				var date1:Date = DateField.stringToDate(dateDeb2.text,'DD/MM/YYYY');
				var date2:Date = DateField.stringToDate(dateFin2.text,'DD/MM/YYYY');
				date1.hours = 0;
				date1.minutes = 0;
				date1.seconds = 0;
				date2.hours = 23;
				date2.minutes = 59;
				date2.seconds = 59;
				
				reportingRO.getOperation("reportForUserByDates").send(
					selectedUserId,
					date1, 
					date2);
			}
			
			protected function reportForUserByDatesHandler(event:ResultEvent):void
			{
				var listeTemps:ArrayCollection =  event.result as ArrayCollection;
				
				//tri par temps
				
				var dataSortField:SortField = new SortField();
				if(listeTemps != null && triTempsParPersonne.selected){
					dataSortField.name = "temps";
					dataSortField.numeric = true;
					dataSortField.descending = false;
				}else{
					dataSortField.name = "projet";
					dataSortField.descending = true;
				}
				
				
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				listeTemps.sort = numericDataSort;
				listeTemps.refresh();
				
				//affichage en jours
				for each (var ligne:Object in listeTemps){
					ligne.temps = ligne.temps/8;
				}
				
				tempsParPersonne = listeTemps;
			}
			
			
			protected function personLabelFunction(item:Object):String{
				return item.prenom + " " + item.nom;
			}
			
			protected function export(event:MouseEvent):void
			{			
				var exportCsv:String = ";";
				
				//1ere ligne, liste des utilisateurs
				for each (var user:Utilisateur in this.listePersonnes) 
				{
					exportCsv += user.prenom + " " + user.nom + ";"
				}
				exportCsv += "\r\n";
				
				//une ligne par projet
				for each (var ligne:Object in tempsParProjet) 
				{
					var projet:String = ligne.projet;
					exportCsv += projet + ";";
					
					//une colonne par utilisateur
					for each (var user:Utilisateur in this.listePersonnes) 
					{
						var temps:String = ligne[user.prenom + " " + user.nom ];
						if(temps == null){
							exportCsv += "0;";
						}else{
							exportCsv += temps.replace(".",",") + ";";
						}
					}
					exportCsv += "\r\n";
					
				}
				
				var exportPopup:ExportPopup= new ExportPopup();
				exportPopup.text = exportCsv;
				PopUpManager.addPopUp(exportPopup,this);
				PopUpManager.centerPopUp(exportPopup);
			}
			
		]]>
	</fx:Script>

	<s:layout>
		<s:VerticalLayout/>	
	</s:layout>
	
	<s:Spacer/>
	
	<mx:TabNavigator width="100%" height="100%" creationPolicy="all" id="tabs">
		
		<s:NavigatorContent label="Repartition par personnes">
			
			<s:VGroup width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10">
				
				<s:HGroup width="100%" height="30" verticalAlign="middle" horizontalAlign="center" gap="10">
					<s:DropDownList id="personDropDown" change="refreshUserByDates()" labelFunction="personLabelFunction" width="185"
									enabled="{UserContext.instance.user.role == 'responsable'}" dataProvider="{this.listePersonnes}" >
					</s:DropDownList>
					<mx:DateField id="dateDeb2" formatString="DD/MM/YYYY" change="refreshUserByDates()"/>
					<mx:DateField id="dateFin2" formatString="DD/MM/YYYY" change="refreshUserByDates()"/>
					<s:Label text="Tri par charge projet"  toolTip="trier par charge projet"/>
					<s:CheckBox id="triTempsParPersonne" toolTip="trier par charge projet" selected="true" change="refreshUserByDates()"/>
				</s:HGroup>
				
				<mx:BarChart id="barchart2" width="100%" height="{20+(tempsParPersonne.length * 30)}" dataProvider="{tempsParPersonne}" showDataTips="true" >
					<mx:series>
						<mx:BarSeries xField="temps" displayName="Charge projet en jours" showDataEffect="{seriesInterpolate}">
							<mx:fill>
								<mx:SolidColor color="haloBlue" alpha="0.6"/>
							</mx:fill>
						</mx:BarSeries>
					</mx:series>
					<mx:verticalAxis >
						<mx:CategoryAxis categoryField="projet"/>
					</mx:verticalAxis>
					<mx:horizontalAxis>
						<mx:LinearAxis id="haxis2"/>
					</mx:horizontalAxis>
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{haxis2}" visible="false"/>
					</mx:horizontalAxisRenderers>
				</mx:BarChart>
			</s:VGroup>
		</s:NavigatorContent>
		
		<s:NavigatorContent id="reportingProjets" label="Repartition par projets" >
			<s:VGroup width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10">
				
				<s:HGroup width="100%" height="30" verticalAlign="middle" horizontalAlign="center" gap="10">
					<mx:DateField id="dateDeb" formatString="DD/MM/YYYY" change="refreshProjectsByDates()" />
					<mx:DateField id="dateFin" formatString="DD/MM/YYYY" change="refreshProjectsByDates()" />
					<s:Label text="Tri par charge projet"  toolTip="trier par charge projet"/>
					<s:CheckBox id="triParTempsProjet" toolTip="trier par charge projet" selected="true" change="refreshProjectsByDates()"/>
					<s:Button label="Exporter" click="export(event)" toolTip="exporter au format CSV"/>
				</s:HGroup>
				
				<mx:BarChart id="barchart1" width="100%" height="{20+(tempsParProjet.length * 30)}" dataProvider="{tempsParProjet}" showDataTips="true">
					<mx:series>
						<mx:BarSet type="stacked" displayName="Charge projet" id="projetsBarSet">
							<mx:BarSeries xField="charge1" />
							<mx:BarSeries xField="charge2" />
							<mx:BarSeries xField="charge3" />
						</mx:BarSet>
					</mx:series>
					<mx:verticalAxis >
						<mx:CategoryAxis categoryField="projet"/>
					</mx:verticalAxis>
					<mx:horizontalAxis>
						<mx:LinearAxis id="haxis"/>
					</mx:horizontalAxis>
					<mx:horizontalAxisRenderers>
						<mx:AxisRenderer axis="{haxis}" visible="false"/>
					</mx:horizontalAxisRenderers>
				</mx:BarChart>
				
			</s:VGroup>	
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	
</s:NavigatorContent>
