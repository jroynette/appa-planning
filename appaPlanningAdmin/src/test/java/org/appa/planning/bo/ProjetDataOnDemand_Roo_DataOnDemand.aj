// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.appa.planning.bo;

import java.lang.Integer;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.appa.planning.bo.Projet;
import org.springframework.stereotype.Component;

privileged aspect ProjetDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProjetDataOnDemand: @Component;
    
    private Random ProjetDataOnDemand.rnd = new SecureRandom();
    
    private List<Projet> ProjetDataOnDemand.data;
    
    public Projet ProjetDataOnDemand.getNewTransientProjet(int index) {
        Projet obj = new Projet();
        setAnnee(obj, index);
        setDescription(obj, index);
        setNom(obj, index);
        return obj;
    }
    
    public void ProjetDataOnDemand.setAnnee(Projet obj, int index) {
        Integer annee = new Integer(index);
        obj.setAnnee(annee);
    }
    
    public void ProjetDataOnDemand.setDescription(Projet obj, int index) {
        String description = "description_" + index;
        if (description.length() > 100) {
            description = description.substring(0, 100);
        }
        obj.setDescription(description);
    }
    
    public void ProjetDataOnDemand.setNom(Projet obj, int index) {
        String nom = "nom_" + index;
        if (nom.length() > 30) {
            nom = nom.substring(0, 30);
        }
        obj.setNom(nom);
    }
    
    public Projet ProjetDataOnDemand.getSpecificProjet(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Projet obj = data.get(index);
        return Projet.findProjet(obj.getId());
    }
    
    public Projet ProjetDataOnDemand.getRandomProjet() {
        init();
        Projet obj = data.get(rnd.nextInt(data.size()));
        return Projet.findProjet(obj.getId());
    }
    
    public boolean ProjetDataOnDemand.modifyProjet(Projet obj) {
        return false;
    }
    
    public void ProjetDataOnDemand.init() {
        data = Projet.findProjetEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Projet' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<org.appa.planning.bo.Projet>();
        for (int i = 0; i < 10; i++) {
            Projet obj = getNewTransientProjet(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
